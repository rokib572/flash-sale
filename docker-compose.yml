version: '3.9'
services:
  api:
    build:
      context: .
      dockerfile: apps/app-api/Dockerfile
    environment:
      NODE_ENV: production
      PORT: 4000
      CORS_ORIGIN: http://localhost:3000,http://localhost:5173
      REDIS_URL: redis://redis:6379
      DATABASE_CONNECTION_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-flash-sale}
      DATABASE_SSL: 'false'
      RESET_ON_START: 0
      SEED_ON_START: ${SEED_ON_START:-false}
      CHOKIDAR_USEPOLLING: 'true'
    ports:
      - '4000:4000'
    # Hot reload: mount source code into the container and run dev watcher
    volumes:
      - ./apps/app-api:/app/apps/app-api
      - ./domain:/app/domain
      - ./packages:/app/packages
      - ./database:/app/database
      - ./tsconfig.base.json:/app/tsconfig.base.json:ro
      - ./turbo.json:/app/turbo.json:ro
      - ./pnpm-workspace.yaml:/app/pnpm-workspace.yaml:ro
      - ./.npmrc:/app/.npmrc:ro
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  web:
    build:
      context: .
      dockerfile: apps/app-ui/Dockerfile
      args:
        VITE_API_URL: /api
    environment:
      NODE_ENV: production
    ports:
      - '3000:80'
    depends_on:
      - api

  web-dev:
    image: node:20-alpine
    profiles: ["dev"]
    working_dir: /workspace
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:4000
      CHOKIDAR_USEPOLLING: 'true'
    volumes:
      - ./:/workspace
    command: sh -lc "corepack enable && corepack prepare pnpm@9.0.0 --activate && pnpm install --filter @flash-sale/web... --frozen-lockfile=false && pnpm -F @flash-sale/web dev -- --host 0.0.0.0"
    ports:
      - '5173:5173'
    depends_on:
      - api

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-flash-sale}
    ports:
      - '5433:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 10

volumes:
  pgdata:

networks:
  default:
    name: flash-sale
